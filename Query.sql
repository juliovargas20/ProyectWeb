/***************** USUARIOS, ROLES, PERMISOS *****************/

CREATE TABLE usuarios
(
  ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  USUARIOS VARCHAR(1000) NOT NULL,
  NOMBRES VARCHAR(1000) NOT NULL,
  PASSWORD VARCHAR(50) NOT NULL,
  ID_CAJA INT(11),
  ESTADO BOOLEAN DEFAULT 1
);

CREATE TABLE caja
(
  ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  CAJA VARCHAR(50) NOT NULL,
  ESTADO BOOLEAN DEFAULT 1
);

CREATE TABLE permisos
(
  ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  PERMISO VARCHAR(100) NOT NULL
);

CREATE TABLE detalle_permiso
(
  ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  ID_ROL INT(11),
  ID_PERMISO INT(11) 
);

ALTER TABLE usuarios
ADD CONSTRAINT fk_usuarios_caja
FOREIGN KEY (ID_CAJA) REFERENCES caja(ID);


/***************** PACIENTES *****************/
/* REGISTRO *****************/
CREATE TABLE registro (
  ID_PACIENTE varchar(10) PRIMARY KEY NOT NULL,
  DNI varchar(11),
  NOMBRES varchar(400),
  GENERO varchar(50),
  CELULAR int(15),
  DIRECCION TEXT,
  LOCACION TEXT,
  EDAD int(3),
  SEDE varchar(50),
  ESTADO varchar(50),
  TIME_AMP varchar(100),
  CANAL varchar(100),
  MOTIVO varchar(500),
  OBSERVACION TEXT,
  FECHA date DEFAULT CURDATE(),
  CORREO varchar(300),
  FECHANAC date,
  AFECCIONES varchar(500),
  ALERGIAS varchar(200)
);

DELIMITER $$
CREATE TRIGGER tr_generar BEFORE INSERT ON registro FOR EACH ROW BEGIN 
	DECLARE COD INT;
    SET COD = (SELECT IFNULL(MAX(CONVERT(SUBSTRING(ID_PACIENTE, 2,5), SIGNED INTEGER)), 0) FROM REGISTRO) + 1;
    SET NEW.ID_PACIENTE = CONCAT('P', LPAD(COD,5,'0'));
END
$$
DELIMITER ;

CREATE TABLE trabajo
(
  ID INT(11) PRIMARY KEY NOT NULL,
  ID_PACIENTE VARCHAR(10),
  TIP_TRAB varchar(200),
  SUB_TRAB varchar(200),
)

ALTER TABLE trabajo
ADD CONSTRAINT fk_trabajo_registro
FOREIGN KEY (ID_PACIENTE) REFERENCES registro(ID_PACIENTE);



/* COTIZACION *****************/

CREATE TABLE cotizacion (
  ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  ID_PACIENTE VARCHAR(10),
  FECHA DATE,
  MONTO DECIMAL(10, 2),
  OBSERVACION TEXT,
  TIP_TRAB VARCHAR(80),
  SUB_TRAB VARCHAR(80),
  PESO INT(3),
  IGV BOOLEAN DEFAULT 0,
  CANTIDAD INT(2)
);

CREATE TABLE lista_cotizacion (
  ID INT PRIMARY KEY AUTO_INCREMENT,
  ID_COTI INT,
  LISTA TEXT
);

ALTER TABLE lista_cotizacion
ADD CONSTRAINT fk_lista_cotizacion_cotizacion
FOREIGN KEY (ID_COTI) REFERENCES cotizacion(ID);



/* CONTRATOS *****************/

CREATE TABLE contratos( 
  ID INT PRIMARY KEY AUTO_INCREMENT,
  FECHA DATE,
  ID_PACIENTE VARCHAR(10),
  MONTO DECIMAL(10, 2),
  TIP_TRAB VARCHAR(80),
  SUB_TRAB VARCHAR(80),
  PDF LONGBLOB
);

CREATE TABLE base_historial
(
  ID INT PRIMARY KEY AUTO_INCREMENT,
  ID_PACIENTE VARCHAR(10),
  TIP_TRAB VARCHAR(80),
  SUB_TRAB VARCHAR(80),
  PROCESO BOOLEAN DEFAULT 1
)

DELIMITER $$
CREATE TRIGGER tr_insertbasehisto AFTER INSERT ON contratos FOR EACH ROW BEGIN

  DECLARE _ID_PACIENTE VARCHAR(80);
  DECLARE _TIP_TRAB VARCHAR(80);
  DECLARE _SUB_TRAB VARCHAR(80);

  SET _ID_PACIENTE = NEW.ID_PACIENTE;
  SET _TIP_TRAB = NEW.TIP_TRAB;
  SET _SUB_TRAB = NEW.SUB_TRAB;

  INSERT INTO base_historial (ID_PACIENTE, TIP_TRAB, SUB_TRAB) VALUES (_ID_PACIENTE, _TIP_TRAB, _SUB_TRAB);
END
$$
DELIMITER ;


/* PAGOS CONTRATOS *****************/
CREATE TABLE pagoscontrato (
  ID INT PRIMARY KEY AUTO_INCREMENT,
  ID_CONTRATO INT,
  ID_PACIENTE VARCHAR(10),
  FECHA DATE DEFAULT CURDATE(),
  NPAGO VARCHAR(20),
  ABONO DECIMAL(10,2),
  TIP_PAGO VARCHAR(50),
  METODO VARCHAR(100),
  COMPROBANTE LONGBLOB,
  TIPO VARCHAR(10)
  PDF LONGBLOB
);


ALTER TABLE pagoscontrato
ADD CONSTRAINT fk_pagoscontrato_contratos
FOREIGN KEY (ID_CONTRATO) REFERENCES contratos(ID);


DELIMITER //
CREATE TRIGGER update_contrato_estado
AFTER INSERT ON pagoscontrato
FOR EACH ROW
BEGIN
    DECLARE total_abonos DECIMAL(10, 2);
    SELECT SUM(ABONO) INTO total_abonos
    FROM pagoscontrato
    WHERE ID_CONTRATO = NEW.ID_CONTRATO;

    IF total_abonos = (SELECT MONTO FROM contratos WHERE ID = NEW.ID_CONTRATO) THEN
        UPDATE contratos
        SET ESTADO = 1
        WHERE ID = NEW.ID_CONTRATO;
    ELSE
        UPDATE contratos
        SET ESTADO = 0
        WHERE ID = NEW.ID_CONTRATO;
    END IF;
END;
//
DELIMITER ;


DELIMITER //
CREATE TRIGGER update_contrato_estado_on_delete
AFTER DELETE ON pagoscontrato
FOR EACH ROW
BEGIN
    DECLARE total_abonos DECIMAL(10, 2);
    SELECT SUM(ABONO) INTO total_abonos
    FROM pagoscontrato
    WHERE ID_CONTRATO = OLD.ID_CONTRATO;

    IF total_abonos = (SELECT MONTO FROM contratos WHERE ID = OLD.ID_CONTRATO) THEN
        UPDATE contratos
        SET ESTADO = 1
        WHERE ID = OLD.ID_CONTRATO;
    ELSE
        UPDATE contratos
        SET ESTADO = 0
        WHERE ID = OLD.ID_CONTRATO;
    END IF;
END;
//
DELIMITER ;


/* HISTORIAL *****************/
CREATE TABLE historial 
(
  ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  ID_BASE INT(11),
  ID_PACIENTE VARCHAR(10),
  FECHACITA DATE,
  DESCRIPCION TEXT,
  TECNICO VARCHAR(50),
  PROCESO BOOLEAN DEFAULT 1
)

CREATE TABLE historial_img
(
  ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  ID_HISTORIAL INT(11),
  ID_PACIENTE VARCHAR(10),
  IMG LONGBLOB,
  TIPO VARCHAR(10),
  NOMBRES TEXT,
  PROCESO BOOLEAN
)

ALTER TABLE historial
ADD CONSTRAINT fk_historial_base_historial
FOREIGN KEY (ID_BASE) REFERENCES base_historial(ID);

ALTER TABLE historial_img
ADD CONSTRAINT fk_historial_img_historial
FOREIGN KEY (ID) REFERENCES historial(ID_HISTORIAL);


/* ACCESORIOS *****************/
CREATE TABLE detalle_pago
(
  ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  ID_USER INT(11),
  ID_PACIENTE VARCHAR(10),
  DESCRIPCION TEXT,
  CANTIDAD DECIMAL(10,2),
  PRECIO_U DECIMAL(10,2),
  SUB_TOTAL DECIMAL(10,2)
)

CREATE TABLE pagos
(
  ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  FECHA DATE,
  ID_PACIENTE VARCHAR(10),
  TIP_PAGO VARCHAR(50),
  PAGO VARCHAR(50),
  TOTAL DECIMAL(10,2),
  OBSERVACION TEXT,
  PDF LONGBLOB
)

/******** CAJA ADMINISTRATIVA *********/
CREATE TABLE ingreso
(
  IN_ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  IN_FECHA DATE DEFAULT CURDATE(),
  IN_TRANSACCION VARCHAR(50),
  IN_COMPROBANTE VARCHAR(50),
  IN_NCOMPRO VARCHAR(50),
  IN_RESPONSABLE VARCHAR(200),
  IN_TIP_PAGO VARCHAR(50),
  IN_DESCRIPCION TEXT,
  IN_AREA VARCHAR(70),
  IN_MONTO DECIMAL(10,2),
);

CREATE TABLE salida
(
  SAL_ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  SAL_FECHA DATE DEFAULT CURDATE(),
  SAL_TRANSACCION VARCHAR(50),
  SAL_COMPROBANTE VARCHAR(50),
  SAL_NCOMPRO VARCHAR(50),
  SAL_RESPONSABLE VARCHAR(200),
  SAL_TIP_PAGO VARCHAR(50),
  SAL_DESCRIPCION TEXT,
  SAL_AREA VARCHAR(70),
  SAL_MONTO DECIMAL(10,2),
);

CREATE TABLE ingreso_recibo
(
  ID INT(11) PRIMARY KEY,
  IN_ID INT(11),
  FECHA DATE DEFAULT CURDATE()
)

ALTER TABLE ingreso_recibo
ADD CONSTRAINT fk_ingreso_ingreso_recibo
FOREIGN KEY (IN_ID) REFERENCES ingreso(IN_ID)
ON DELETE CASCADE
ON UPDATE CASCADE;

CREATE TABLE cerrar_caja
(
  ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  FECHA DATE DEFAULT CURDATE(),
  MONTO DECIMAL(10,2),
  PDF LONGBLOB
)

DELIMITER //

CREATE PROCEDURE CalculaResta()
BEGIN
  DECLARE in_total DECIMAL(10, 2);
  DECLARE sal_total DECIMAL(10, 2);

  SELECT IFNULL(SUM(IN_MONTO), 0.00) INTO in_total FROM ingreso;
  SELECT IFNULL(SUM(SAL_MONTO), 0.00) INTO sal_total FROM salida;

  SELECT (in_total - sal_total) AS RESTA;
END //

DELIMITER ;


SELECT registro.ID_PACIENTE, registro.NOMBRES 
INTO OUTFILE 'C:/Users/jvdar/OneDrive/Escritorio/Backup2023V.2/archivo_salida.csv' 
FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\n'
FROM registro ;


/******** COMPRAS DE PRODUCTOS **********/

CREATE TABLE detalle_compras
(
  ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  ID_USER INT(11),
  DESCRIPCION TEXT,
  CANTIDAD DECIMAL(10,2),
  PRECIO_U DECIMAL(10,2),
  SUB_TOTAL DECIMAL(10,2)
);

CREATE TABLE compras
(
  ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  FECHA DATE DEFAULT CURDATE(),
  NOMBRES VARCHAR(200),
  DNI VARCHAR(12),
  TIP_PAGO VARCHAR(50),
  PAGO VARCHAR(50),
  TOTAL DECIMAL(10,2),
  OBSERVACION TEXT,
  PDF LONGBLOB
);

/************** ARCHIVOS **************/
CREATE TABLE archivo
(
  ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  ID_BASE INT(11),
  NOMBRES TEXT,
  DOCUMENTO LONGBLOB,
  TIPO VARCHAR(20)
);


ALTER TABLE archivo
ADD CONSTRAINT fk_archivo_base_historial
FOREIGN KEY (ID_BASE) REFERENCES base_historial(ID);


/************** ORDEN DE COMPRA **************/
CREATE TABLE ordencompra
(
  ID VARCHAR(10) PRIMARY KEY,
  FECHA DATE DEFAULT CURDATE(),
  AREA VARCHAR(50),
  NECESIDAD VARCHAR(80),
  CONCEPTO VARCHAR(100),
  TOTAL DECIMAL(10,2)
);

CREATE TABLE detalle_ordencompra
(
  ID INT(11) PRIMARY KEY AUTO_INCREMENT,
  ID_USER INT(11),
  DESCRIPCION TEXT,
  UNIDADES VARCHAR(5),
  CANTIDAD DECIMAL(10,2),
  PRECIO_U DECIMAL(10,2),
  SUB_TOTAL DECIMAL(10,2)
);

DELIMITER $$

CREATE TRIGGER before_insert_orden_compra
BEFORE INSERT ON ordencompra
FOR EACH ROW
BEGIN
 DECLARE nuevo_numero INT;

    -- Obtener el último número de factura
    SELECT IFNULL(MAX(CONVERT(SUBSTRING(ID, 3), SIGNED INTEGER)), 0) INTO nuevo_numero
    FROM ordencompra;

    -- Incrementar el número
    SET nuevo_numero = nuevo_numero + 1;

    -- Formatear el nuevo número con ceros a la izquierda y asignar a la columna ID
    SET NEW.ID = CONCAT('OC', LPAD(nuevo_numero, 6, '0'));
    
END 
$$
DELIMITER ;


/************** ORDEN DE TRABAJO **************/
CREATE TABLE ordentrabajo
(
  ID VARCHAR(10) PRIMARY KEY,
  FECHA DATE DEFAULT CURDATE(),
  NECESIDAD VARCHAR(50),
  RE_P VARCHAR(50),
  APRO VARCHAR(100),
  ACTIVIDAD VARCHAR(100),
  DESCRIPCION TEXT,
  RE_A VARCHAR(50),
  RESPONSABLE VARCHAR(100),
  TIEMPO DATE
);

CREATE TRIGGER before_insert_orden_trabajo
BEFORE INSERT ON ordentrabajo
FOR EACH ROW
BEGIN
 DECLARE nuevo_numero INT;

    -- Obtener el último número de factura
    SELECT IFNULL(MAX(CONVERT(SUBSTRING(ID, 3), SIGNED INTEGER)), 0) INTO nuevo_numero
    FROM ordentrabajo;

    -- Incrementar el número
    SET nuevo_numero = nuevo_numero + 1;

    -- Formatear el nuevo número con ceros a la izquierda y asignar a la columna ID
    SET NEW.ID = CONCAT('OT', LPAD(nuevo_numero, 6, '0'));
    
END 
$$
DELIMITER ;


/*** PROVEEDORES **/
CREATE TABLE detalle_proveedor
(
  ID INT PRIMARY KEY AUTO_INCREMENT,
  ID_USER INT,
  PRO_NOMBRE VARCHAR(50),
  PAIS VARCHAR(50),
  TEL_PRO VARCHAR(50),
  PAGINA TEXT,
  VENDEDOR VARCHAR(100),
  TEL_VENDEDOR VARCHAR(50),
  CANTIDAD DECIMAL(10,2),
  PRODUCTO VARCHAR(100),
  DESCRIPCION TEXT,
  LINK TEXT,
  OBSERVACION TEXT,
  MONEDA VARCHAR(3),
  PRECIO DECIMAL(10,2)
);

CREATE TABLE importacion
(
  ID VARCHAR(10) PRIMARY KEY,
  FECHA DATE DEFAULT CURDATE(),
  AREA VARCHAR(100),
  PDF LONGBLOB,
  STATUS BOOLEAN DEFAULT 0
);


CREATE TRIGGER before_insert_importacion
BEFORE INSERT ON importacion
FOR EACH ROW
BEGIN
 DECLARE nuevo_numero INT;

    -- Obtener el último número de factura
    SELECT IFNULL(MAX(CONVERT(SUBSTRING(ID, 3), SIGNED INTEGER)), 0) INTO nuevo_numero
    FROM importacion;

    -- Incrementar el número
    SET nuevo_numero = nuevo_numero + 1;

    -- Formatear el nuevo número con ceros a la izquierda y asignar a la columna ID
    SET NEW.ID = CONCAT('OI', LPAD(nuevo_numero, 6, '0'));
    
END 
$$
DELIMITER ;


/*** CONSENTIMIENTO **/
CREATE TABLE consen
(
  ID INT PRIMARY KEY AUTO_INCREMENT,
  ID_CONTRATO INT,
  ID_PACIENTE VARCHAR(10),
  TIP_TRAB VARCHAR(100),
  SUB_TRAB VARCHAR(100)
);

CREATE TABLE list_consen
(
  ID INT PRIMARY KEY AUTO_INCREMENT,
  ID_CONSEN INT,
  ITEM TEXT
);

ALTER TABLE list_consen
ADD CONSTRAINT fk_consen_list_consen
FOREIGN KEY (ID_CONSEN) REFERENCES consen(ID);






/*********** LOGISTICA - ALMACEN ***************/
-- Crear la tabla PRODUCTOS
CREATE TABLE productos (
    ID_PRODUCTO INT PRIMARY KEY AUTO_INCREMENT,
    CODIGO_PRODUCTO VARCHAR(20) UNIQUE,
    NOMBRE VARCHAR(200),
    DESCRIPCION TEXT,
    UNIDADES varchar(20),
    STOCK_MINIMO DECIMAL(10,2),
    INDEX (CODIGO_PRODUCTO)
);

CREATE TABLE inventario (
    ID_INVENTARIO INT PRIMARY KEY AUTO_INCREMENT,
    ID_PRODUCTO INT,
    SEDE VARCHAR(20),
    AREA VARCHAR(50),
    STOCK_MINIMO DECIMAL(10,2),
    FOREIGN KEY (ID_PRODUCTO) REFERENCES productos(ID_PRODUCTO) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Crear la tabla PRODUCTOS_SERIE
CREATE TABLE productos_series (
    ID_SERIE INT PRIMARY KEY AUTO_INCREMENT,
    ID_PRODUCTO INT,
    NSERIE VARCHAR(50),
    FECHA DATETIME DEFAULT NOW(),
    FOREIGN KEY (ID_PRODUCTO) REFERENCES productos(ID_PRODUCTO) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Crear la tabla ENTRADAS
CREATE TABLE entradas (
    ID_ENTRADA INT PRIMARY KEY AUTO_INCREMENT,
    ID_PRODUCTO INT,
    BOLETA VARCHAR(10),
    CANTIDAD DECIMAL(10,2),
    FECHA DATETIME DEFAULT NOW(),
    FOREIGN KEY (ID_PRODUCTO) REFERENCES productos(ID_PRODUCTO) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Crear la tabla ENTRADAS_SERIE
CREATE TABLE entradas_Series (
    ID_ENTRADA_SERIE INT PRIMARY KEY AUTO_INCREMENT,
    ID_ENTRADA INT,
    ID_SERIE INT,
    FOREIGN KEY (ID_ENTRADA) REFERENCES entradas(ID_ENTRADA) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ID_SERIE) REFERENCES productos_series(ID_SERIE) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Crear la tabla SALIDAS
CREATE TABLE salidas (
    ID_SALIDA INT PRIMARY KEY AUTO_INCREMENT,
    ID_PRODUCTO INT,
    FACTURA VARCHAR(255),
    EMISOR VARCHAR(255),
    RECEPTOR VARCHAR(255),
    AREA VARCHAR(255),
    CANTIDAD INT,
    FECHA DATE,
    ID_PACIENTE INT,
    FOREIGN KEY (ID_PRODUCTO) REFERENCES productos(ID_PRODUCTO) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Crear la tabla SALIDAS_SERIE
CREATE TABLE salidas_series (
    ID_SALIDA_SERIE INT PRIMARY KEY AUTO_INCREMENT,
    ID_SALIDA INT,
    ID_SERIE INT,
    FOREIGN KEY (ID_SALIDA) REFERENCES salidas(ID_SALIDA) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ID_SERIE) REFERENCES productos_series(ID_SERIE) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Crear la vista RESUMEN_INVENTARIO
CREATE VIEW resumen_inventario AS
SELECT
    P.ID_PRODUCTO,
    P.CODIGO_PRODUCTO,
    P.NOMBRE,
    P.UNIDADES AS CANTIDAD_TOTAL,
    P.STOCK_MINIMO,
    SUM(E.CANTIDAD) AS entradas,
    SUM(S.CANTIDAD) AS salidas,
    P.UNIDADES - SUM(S.CANTIDAD) AS STOCK_EN_EXISTENCIA
FROM
    productos P
    LEFT JOIN entradas E ON P.ID_PRODUCTO = E.ID_PRODUCTO
    LEFT JOIN salidas S ON P.ID_PRODUCTO = S.ID_PRODUCTO
GROUP BY
    P.ID_PRODUCTO;


ALTER TABLE salidas ADD FOREIGN KEY (ID_PACIENTE) REFERENCES registro(ID_PACIENTE) ON DELETE SET NULL ON UPDATE CASCADE;


DELIMITER //

CREATE PROCEDURE InsertarProductoInventario(
    IN p_codigo_producto VARCHAR(20),
    IN p_nombre VARCHAR(200),
    IN p_descripcion TEXT,
    IN p_unidades varchar(20),
    IN p_stock_minimo decimal(10,2),
    IN p_sede VARCHAR(20),
    IN p_area VARCHAR(50)
)
BEGIN
    DECLARE producto_id INT;

    -- Insertar en la tabla PRODUCTOS
    INSERT INTO productos (CODIGO_PRODUCTO, NOMBRE, DESCRIPCION, UNIDADES, STOCK_MINIMO)
    VALUES (p_codigo_producto, p_nombre, p_descripcion, p_unidades, p_stock_minimo);

    -- Obtener el ID del producto recién insertado
    SET producto_id = LAST_INSERT_ID();

    -- Insertar en la tabla INVENTARIO
    INSERT INTO inventario (ID_PRODUCTO, SEDE, AREA, STOCK_MINIMO)
    VALUES (producto_id, p_sede, p_area, p_stock_minimo);
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE UpdateProductoInventario(
    IN p_codigo_producto VARCHAR(20),
    IN p_nombre VARCHAR(200),
    IN p_descripcion TEXT,
    IN p_unidades varchar(20),
    IN p_stock_minimo decimal(10,2),
    IN p_area VARCHAR(50),
    IN p_id_producto INT
)
BEGIN

    -- Actualizar en la tabla PRODUCTOS
    UPDATE productos SET CODIGO_PRODUCTO = p_codigo_producto, NOMBRE = p_nombre, DESCRIPCION = p_descripcion, UNIDADES = p_unidades, STOCK_MINIMO = p_stock_minimo WHERE ID_PRODUCTO = p_id_producto;

    -- Actualizar en la tabla INVENTARIO
    UPDATE inventario SET AREA = p_area, STOCK_MINIMO = p_stock_minimo WHERE ID_PRODUCTO = p_id_producto;


END //

DELIMITER ;


DELIMITER //

CREATE PROCEDURE Insert_ProductSerie_Entries(
  IN p_id_producto INT,
  IN p_nserie VARCHAR(50),
  IN p_boleta VARCHAR(50),
  IN p_cantidad DECIMAL(10,2)
)
BEGIN
    DECLARE id_product_serie INT;
    DECLARE id_serie INT;

    -- INSERTAR EN LA TABLA PRODUCTOS_SERIES
    INSERT INTO productos_series (ID_PRODUCTO, NSERIE) VALUES (p_id_producto, p_nserie);

    SET id_product_serie = LAST_INSERT_ID();

    -- INSERTAR EN LA TABLA ENTRADAS
    INSERT INTO entradas (ID_PRODUCTO, BOLETA, CANTIDAD) VALUES (p_id_producto, p_boleta, p_cantidad);
    SET id_serie = LAST_INSERT_ID();

    -- INSERTAR EN LA TABLA ENTRADAS_SERIES
    INSERT INTO entradas_series (ID_ENTRADA, ID_SERIE) VALUES (id_serie, id_product_serie);

END;

DELIMITER ;
